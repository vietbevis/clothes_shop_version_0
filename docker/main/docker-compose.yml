services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./zookeeper-data:/var/lib/zookeeper/data
      - ./zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - ./kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - '8080:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: nest_mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=P@ssword!123
      - MYSQL_DATABASE=my_database
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - '${DB_PORT:-3306}:3306'
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: nest_redis
    restart: unless-stopped
    command: redis-server --requirepass P@ssword!123
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - app-network

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - '8001:8001'
    volumes:
      - redisinsight-data:/db
    depends_on:
      - redis
    networks:
      - app-network

  minio:
    image: minio/minio
    container_name: nest_minio
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    ports:
      - '9000:9000'
      - '9001:9001'
    command: server /data --console-address ":9001"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  minio_data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redisinsight-data:
